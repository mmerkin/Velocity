#! /bin/bash

# Frequently changed variables

datapath=
temp=
output=
REF=
logfile=
threads=
remove_temp=

add_RG=
RGID=
RGLB=


# path to tools/conda environments
PICARD=~/apps/picard/build/libs/picard.jar
ATLAS=~/apps/atlas/build/atlas
conda=~/miniconda3/bin/
mem2=mem2
GATK38=GATK38


if [[ -z $datapath ]] || [[ -z $temp ]] || [[ -z $output ]] || [[ -z $REF ]] || [[ -z $logfile ]] || [[ -z $threads ]] || [[ -z $remove_temp ]] || [[ -z $add_RG ]]; then
echo "At least one essential variable is missing. Make sure to define the variables before running the script" 
exit 1
fi


exec 3>&1 1>"$logfile" 2>&1
trap "echo 'ERROR: An error occurred during execution, check $logfile for details.' >&3" ERR
trap '{ set +x; } 2>/dev/null; echo -n "[$(date -Is)]  "; set -x' DEBUG
set -e

# Process the bam files

for file in "$datapath"/*; do 

# Set variables for next task

filetag=${file##*/}
echo -e "\nMoving to sample ${filetag}" | tee /dev/fd/3 # tee displays the echo output in the terminal now that stdout is sent to a log file
mkdir -p "$temp/$filetag"
mkdir -p "$output/$filetag"


if [[ $CONDA_DEFAULT_ENV != "base" ]]; then
conda deactivate
fi


source $conda/activate $mem2

bwa-mem2 mem -t $threads $REF "$file/*R1*.fastq.gz" "$file/*R2*.fastq.gz" > "$temp/$filetag/$filetag.raw.bam"

echo "Mapped reads" | tee /dev/fd/3

if $add_RG; then
  java -jar "$PICARD" AddOrReplaceReadGroups \
  -I "$temp/$filetag/$filetag.raw.bam" \
  -O "$temp/$filetag/$filetag.RG.bam" \
  -RGID "$RGID" \
  -RGLB "$RGLB" \
  -RGPL ILLUMINA -RGPU unit1 \
  -RGSM "$filetag"
  echo "Added read groups" | tee /dev/fd/3
  samtools view -@ 32 -b -F 260 -q 20 "$temp/$filetag/$filetag.RG.bam" -o "$temp/$filetag/$filetag.filtered.bam"
else
  samtools view -@ 32 -b -F 260 -q 20 "$temp/$filetag/$filetag.raw.bam" -o "$temp/$filetag/$filetag.filtered.bam"
fi

echo "Filtered" | tee /dev/fd/3

# Sort the reads by name for fixmate input

samtools sort -@ $threads -n "$temp/$filetag/$filetag.filtered.bam" -o "$temp/$filetag/$filetag.sorted.n.bam"

# Add mate score tags for duplicate removal

samtools fixmate -@ $threads -m "$temp/$filetag/$filetag.sorted.n.bam" "$temp/$filetag/$filetag.fixmate.bam"

# Sort the reads by position for markdup input

samtools sort -@ $threads "$temp/$filetag/$filetag.fixmate.bam" -o "$temp/$filetag/$filetag.sorted.p.bam" 2> /dev/null

# Remove duplicate reads

samtools markdup -r -@ $threads "$temp/$filetag/$filetag.sorted.p.bam" "$temp/$filetag/$filetag.rmdup.bam"

# Index the duplicate-removed bam file

samtools index "$temp/$filetag/$filetag.rmdup.bam"

echo "Removed duplicates" | tee /dev/fd/3

## Realign around indels

conda deactivate
source $conda/activate $GATK38

gatk3 \
-T RealignerTargetCreator \
-R $REF \
-o "$temp/$filetag/$filetag.intervals" \
-I "$temp/$filetag/$filetag.rmdup.bam"

gatk3 \
-T IndelRealigner \
-R $REF \
-targetIntervals "$temp/$filetag/$filetag.intervals" \
-I "$temp/$filetag/$filetag.rmdup.bam" \
-o "$temp/$filetag/$filetag.realn.bam"

echo "Realigned around indels" | tee /dev/fd/3

$ATLAS BAMDiagnostics \
--splitMergeInput \
--bam "$temp/$filetag/$filetag.realn.bam"

$ATLAS mergeOverlappingReads \
--readGroupSettings "$temp/$filetag/$filetag.realn_splitMergeInput.txt" \
--bam "$temp/$filetag/$filetag.realn.bam" \
--out "$output/$filetag/$filetag"

echo "Merged overlaps" | tee /dev/fd/3

if $remove_temp; then
rm -r $temp
fi

done

echo -e "\nAll samples processed!" | tee /dev/fd/3
